{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "loading-button",
  "type": "registry:component",
  "description": "A button that shows a loading spinner when clicked.",
  "files": [
    {
      "path": "src/registry/new-york/items/loading-button/loading-button.tsx",
      "content": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { Loader2 } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface iAppProps {\n  children: React.ReactNode;\n  variant?: \"default\" | \"outline\" | \"ghost\" | \"link\";\n  size?: \"default\" | \"sm\" | \"lg\" | \"icon\";\n  className?: string;\n  onClick: () => Promise<void> | void;\n  type?: \"button\" | \"submit\" | \"reset\";\n}\n\nexport const LoadingButton = ({\n  children = \"Click me\",\n  variant = \"default\",\n  size = \"default\",\n  className,\n  onClick,\n  type = \"button\",\n}: iAppProps) => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClick = async () => {\n    if (isLoading) return;\n\n    setIsLoading(true);\n    try {\n      await onClick?.();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Button\n      className={cn(\"min-w-0\", className)}\n      disabled={isLoading}\n      onClick={handleClick}\n      type={type}\n      variant={variant}\n      size={size}\n      style={{ minWidth: isLoading ? undefined : \"auto\" }}\n    >\n      <span\n        className={cn(\n          \"flex items-center justify-center\",\n          isLoading && \"invisible\"\n        )}\n      >\n        {children}\n      </span>\n      {isLoading && <Loader2 className=\"w-4 h-4 animate-spin absolute\" />}\n    </Button>\n  );\n};\n",
      "type": "registry:ui"
    }
  ]
}